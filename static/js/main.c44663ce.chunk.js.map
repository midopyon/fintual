{"version":3,"sources":["components/Stock.js","components/Portfolio.js","components/DayPickers.js","utils/getYearsBetweenDates.js","services/getStockPrice.js","components/ProfitResults.js","utils/calculateAnnualizedReturn.js","utils/calculateProfit.js","containers/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["StockContainer","styled","div","StockName","QtyContainer","Stock","props","name","qty","PortfolioContainer","PortfolioHeader","StonksContainer","PortfolioComponent","stocks","length","map","stock","index","DayPickerContainer","DayPickers","setStartDate","setEndDate","setYearsBetweenDates","useState","fullStartDate","setFullStartDate","fullEndDate","setFullEndDate","placeholderText","selected","onChange","date","day","startDateString","toISOString","split","handleStartDatePick","dateFormat","minDate","Date","maxDate","startDate","endDateString","getTime","handleEndDatePick","pricesGoog","require","pricesTsla","pricesAapl","pricesNvda","getStockPricePerName","ProfitContainer","ResultContainer","ProfitResults","endDate","yearsBetweenDates","profit","setProfit","annReturn","setAnnReturn","getProfit","startValue","endValue","forEach","Math","pow","calculateAnnualizedReturn","toFixed","calculateProfit","useEffect","MainContainer","MainButton","button","disabled","css","MainPage","disableButton","setDisableButton","showResult","setShowResult","Portfolio","datesSelected","trim","checkForFields","onClick","App","className","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"glgDAGMA,EAAiBC,IAAOC,IAAV,+OAWdC,EAAYF,IAAOC,IAAV,kHAOTE,EAAeH,IAAOC,IAAV,kHAiBHG,EAVD,SAACC,GACb,IAAQC,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,IACd,OACE,eAACR,EAAD,WACE,cAACG,EAAD,UAAYI,IACZ,eAACH,EAAD,sBAAuBI,SC7BvBC,EAAqBR,IAAOC,IAAV,6JASlBQ,EAAkBT,IAAOC,IAAV,0IAQfS,EAAkBV,IAAOC,IAAV,yGAwBNU,EAlBY,SAACN,GAC1B,IAAQO,EAAWP,EAAXO,OACR,OACE,eAACJ,EAAD,WACE,cAACC,EAAD,6BACA,cAACC,EAAD,UACGE,EAAOC,OAAS,EACfD,EAAOE,KAAI,SAACC,EAAOC,GACjB,OAAO,cAAC,EAAD,CAAmBV,KAAMS,EAAMT,KAAMC,IAAKQ,EAAMR,KAApCS,MAGrB,qF,uBChCV,IAAMC,EAAqBjB,IAAOC,IAAV,yNAyDTiB,EA9CI,SAACb,GAClB,IAAQc,EAAmDd,EAAnDc,aAAcC,EAAqCf,EAArCe,WAAYC,EAAyBhB,EAAzBgB,qBAClC,EAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCF,mBAAS,MAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAeA,OACE,eAACT,EAAD,mBAEE,8BACE,cAAC,IAAD,CACEU,gBAAgB,uBAChBC,SAAUL,EACVM,SAAU,SAACC,GAAD,OApBU,SAACC,GAC3BP,EAAiBO,GACjB,IAAMC,EAAkBD,EAAIE,cAAcC,MAAM,KAAK,GACrDf,EAAaa,GAiBaG,CAAoBL,IACxCM,WAAW,aACXC,QAAS,IAAIC,KAAK,cAClBC,QAAS,IAAID,KAAK,kBATxB,MAaE,8BACE,cAAC,IAAD,CACEX,gBAAgB,sBAChBC,SAAUH,EACVI,SAAU,SAACC,GAAD,OAzBQ,SAACC,GACzBL,EAAeK,GACf,IC9BiCS,ED8B3BC,EAAgBV,EAAIE,cAAcC,MAAM,KAAK,GACnDd,EAAWqB,GACXpB,GChCiCmB,EDgCSjB,GAAeQ,EC/BnCW,UAAYF,EAAUE,WACrB,MACN,MDkDSC,CAAkBb,IACtCM,WAAW,aACXC,QAASd,EACTgB,QAAS,IAAID,KAAK,sBExD5B,I,IAAMM,EAAaC,EAAQ,KACrBC,EAAaD,EAAQ,KACrBE,EAAaF,EAAQ,KACrBG,EAAaH,EAAQ,KAEpB,SAASI,EAAqB3C,EAAMwB,GACzC,OAAQxB,GACN,IAAK,OACH,OAAOsC,EAAWd,GAAQc,EAAWd,GAAQ,EAC/C,IAAK,OACH,OAAOgB,EAAWhB,GAAQgB,EAAWhB,GAAQ,EAC/C,IAAK,OACH,OAAOiB,EAAWjB,GAAQiB,EAAWjB,GAAQ,EAC/C,IAAK,OACH,OAAOkB,EAAWlB,GAAQkB,EAAWlB,GAAQ,EAC/C,QACE,OAAO,GCVb,I,MAAMoB,EAAkBlD,IAAOC,IAAV,gQAYfkD,EAAkBnD,IAAOC,IAAV,wNAiDNmD,EAtCO,SAAC/C,GACrB,IAAQO,EAAkDP,EAAlDO,OAAQ4B,EAA0CnC,EAA1CmC,UAAWa,EAA+BhD,EAA/BgD,QAASC,EAAsBjD,EAAtBiD,kBACpC,EAA4BhC,mBAAS,GAArC,mBAAOiC,EAAP,KAAeC,EAAf,KACA,EAAkClC,mBAAS,GAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,WAChB,IAAIC,EAAa,EACbC,EAAW,EAgBf,OAfAjD,EAAOkD,SAAQ,SAAC/C,GACd6C,GACeX,EAAqBlC,EAAMT,KAAMkC,GAAazB,EAAMR,IACnEsD,GACaZ,EAAqBlC,EAAMT,KAAM+C,GAAWtC,EAAMR,OAGjEmD,EC5CG,SACLE,EACAC,EACAP,GAOA,OAAsE,KAA9DS,KAAKC,IAAIH,EAAWD,EAAY,EAAIN,GAAqB,GDmC7DW,CACEL,EACAC,EACAP,GACAY,QAAQ,IEjDT,SAAyBN,EAAYC,GAC1C,OAASA,EAAWD,GAAcA,EAAc,IFmDvCO,CAAgBP,EAAYC,GAAUK,QAAQ,IAOvD,OAJAE,qBAAU,WACRZ,EAAUG,OACT,IAGD,eAACT,EAAD,WACE,eAACC,EAAD,sBAA0BI,EAA1B,OACA,eAACJ,EAAD,0BAA8BM,EAA9B,WGxDAY,EAAgBrE,IAAOC,IAAV,6IAQbqE,EAAatE,IAAOuE,OAAV,wWAeZ,SAAClE,GAAD,OACAA,EAAMmE,UACNC,YADA,oHA6DWC,EArDE,WACf,MAAkCpD,mBAAS,IAA3C,mBAAOkB,EAAP,KAAkBrB,EAAlB,KACA,EAA8BG,mBAAS,IAAvC,mBAAO+B,EAAP,KAAgBjC,EAAhB,KACA,EAA0CE,oBAAS,GAAnD,mBAAOqD,EAAP,KAAsBC,EAAtB,KACA,EAAoCtD,oBAAS,GAA7C,mBAAOuD,EAAP,KAAmBC,EAAnB,KACA,EAAkDxD,mBAAS,GAA3D,mBAAOgC,EAAP,KAA0BjC,EAA1B,KAEM0D,EAAY,CAChBnE,OAAQ,CACN,CAAEN,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,OAAQC,IAAK,QAkBzB,OAFA6D,qBAAU,kBATa,WACrB,IAAMY,EAAgBxC,EAAUyC,OAAOpE,QAAUwC,EAAQ4B,OAAOpE,OAE9D+D,GADEI,GAOUE,MAGd,eAACb,EAAD,WACE,cAAC,EAAD,CAAoBzD,OAAQmE,EAAUnE,SACtC,cAAC,EAAD,CACEO,aAAcA,EACdC,WAAYA,EACZC,qBAAsBA,IAExB,cAACiD,EAAD,CAAYa,QAvBM,WACpBL,GAAc,IAsBwBN,SAAUG,EAA9C,iCAGCE,GACC,cAAC,EAAD,CACEjE,OAAQmE,EAAUnE,OAClB4B,UAAWA,EACXa,QAASA,EACTC,kBAAmBA,QCjEd8B,EAhBH,WACV,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,8BAEE,sBAAMC,KAAK,MAAM,aAAW,SAA5B,6BAIF,sBAAMD,UAAU,WAAhB,SACE,cAAC,EAAD,UCDOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c44663ce.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StockContainer = styled.div`\n  width: 200px;\n  height: 100px;\n  padding: 20px;\n  border: 1px dashed #bdbdbd;\n  border-radius: 4px;\n  box-sizing: border-box;\n  background-color: white;\n  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.05);\n`;\n\nconst StockName = styled.div`\n  text-align: left;\n  font-family: \"Poppins\";\n  font-weight: 600;\n  color: black;\n`;\n\nconst QtyContainer = styled.div`\n  text-align: left;\n  font-family: \"Poppins\";\n  font-weight: 400;\n  color: black;\n`;\n\nconst Stock = (props) => {\n  const { name, qty } = props;\n  return (\n    <StockContainer>\n      <StockName>{name}</StockName>\n      <QtyContainer>shares: {qty}</QtyContainer>\n    </StockContainer>\n  );\n};\n\nexport default Stock;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Stock from \"./Stock\";\n\nconst PortfolioContainer = styled.div`\n  width: 50%;\n  padding: 20px;\n  margin-top: 15px;\n  display: flex;\n  flex-direction: column;\n  background-color: #005ad6;\n`;\n\nconst PortfolioHeader = styled.div`\n  margin-bottom: 10px;\n  text-align: left;\n  font-family: \"Poppins\";\n  font-weight: 500;\n  color: white;\n`;\n\nconst StonksContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst PortfolioComponent = (props) => {\n  const { stocks } = props;\n  return (\n    <PortfolioContainer>\n      <PortfolioHeader>my investments</PortfolioHeader>\n      <StonksContainer>\n        {stocks.length > 0 ? (\n          stocks.map((stock, index) => {\n            return <Stock key={index} name={stock.name} qty={stock.qty} />;\n          })\n        ) : (\n          <div>no stocks yet :c get investing with fintual!</div>\n        )}\n      </StonksContainer>\n    </PortfolioContainer>\n  );\n};\n\nexport default PortfolioComponent;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { getYearsBetweenDates } from \"../utils/getYearsBetweenDates\";\n\nconst DayPickerContainer = styled.div`\n  width: 50%;\n  padding: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  background-color: white;\n  font-family: \"Poppins\";\n`;\n\nconst DayPickers = (props) => {\n  const { setStartDate, setEndDate, setYearsBetweenDates } = props;\n  const [fullStartDate, setFullStartDate] = useState(null);\n  const [fullEndDate, setFullEndDate] = useState(null);\n\n  const handleStartDatePick = (day) => {\n    setFullStartDate(day);\n    const startDateString = day.toISOString().split(\"T\")[0];\n    setStartDate(startDateString);\n  };\n\n  const handleEndDatePick = (day) => {\n    setFullEndDate(day);\n    const endDateString = day.toISOString().split(\"T\")[0];\n    setEndDate(endDateString);\n    setYearsBetweenDates(getYearsBetweenDates(fullStartDate, day));\n  };\n\n  return (\n    <DayPickerContainer>\n      from:\n      <div>\n        <DatePicker\n          placeholderText=\"pick a start date :3\"\n          selected={fullStartDate}\n          onChange={(date) => handleStartDatePick(date)}\n          dateFormat=\"dd/MM/yyyy\"\n          minDate={new Date(\"01-01-2020\")}\n          maxDate={new Date(\"11-28-2021\")}\n        />\n      </div>\n      to:\n      <div>\n        <DatePicker\n          placeholderText=\"pick an end date :3\"\n          selected={fullEndDate}\n          onChange={(date) => handleEndDatePick(date)}\n          dateFormat=\"dd/MM/yyyy\"\n          minDate={fullStartDate}\n          maxDate={new Date(\"11-28-2021\")}\n        />\n      </div>\n    </DayPickerContainer>\n  );\n};\n\nexport default DayPickers;\n","export function getYearsBetweenDates(startDate, endDate) {\n  var difInTime = endDate.getTime() - startDate.getTime();\n  var difInDays = difInTime / (1000 * 3600 * 24);\n  return difInDays / 365;\n}\n","const pricesGoog = require(\"../constants/pricesGoog.json\");\nconst pricesTsla = require(\"../constants/pricesTsla.json\");\nconst pricesAapl = require(\"../constants/pricesAapl.json\");\nconst pricesNvda = require(\"../constants/pricesNvda.json\");\n\nexport function getStockPricePerName(name, date) {\n  switch (name) {\n    case \"GOOG\":\n      return pricesGoog[date] ? pricesGoog[date] : 0;\n    case \"TSLA\":\n      return pricesTsla[date] ? pricesTsla[date] : 0;\n    case \"AAPL\":\n      return pricesAapl[date] ? pricesAapl[date] : 0;\n    case \"NVDA\":\n      return pricesNvda[date] ? pricesNvda[date] : 0;\n    default:\n      return 0;\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { calculateProfit } from \"../utils/calculateProfit\";\nimport { calculateAnnualizedReturn } from \"../utils/calculateAnnualizedReturn\";\nimport { getStockPricePerName } from \"../services/getStockPrice\";\n\nconst ProfitContainer = styled.div`\n  width: 50%;\n  height: 100%;\n  padding: 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  background-color: white;\n  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.05);\n`;\n\nconst ResultContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  position: relative;\n  padding: 24px;\n  background-color: #f3f6fa;\n  border-radius: 12px;\n  font-family: \"Poppins\";\n`;\n\nconst ProfitResults = (props) => {\n  const { stocks, startDate, endDate, yearsBetweenDates } = props;\n  const [profit, setProfit] = useState(0);\n  const [annReturn, setAnnReturn] = useState(0);\n\n  const getProfit = () => {\n    var startValue = 0;\n    var endValue = 0;\n    stocks.forEach((stock) => {\n      startValue =\n        startValue + getStockPricePerName(stock.name, startDate) * stock.qty;\n      endValue =\n        endValue + getStockPricePerName(stock.name, endDate) * stock.qty;\n    });\n\n    setAnnReturn(\n      calculateAnnualizedReturn(\n        startValue,\n        endValue,\n        yearsBetweenDates\n      ).toFixed(2)\n    );\n    // With the value of our portfolio in both dates, we call the helper function to calculate the profit:\n    return calculateProfit(startValue, endValue).toFixed(2);\n  };\n\n  useEffect(() => {\n    setProfit(getProfit());\n  }, []);\n\n  return (\n    <ProfitContainer>\n      <ResultContainer>simple: {profit}%</ResultContainer>\n      <ResultContainer>annualized: {annReturn}%</ResultContainer>\n    </ProfitContainer>\n  );\n};\n\nexport default ProfitResults;\n","export function calculateAnnualizedReturn(\n  startValue,\n  endValue,\n  yearsBetweenDates\n) {\n  // To calculate the annualized portfolio return, divide the final value\n  // by the initial value, then raise that number by 1/n, where \"n\" is the\n  // number of years you held the investments.\n  // Then, subtract 1 and multiply by 100.\n\n  return (Math.pow(endValue / startValue, 1 / yearsBetweenDates) - 1) * 100;\n}\n","export function calculateProfit(startValue, endValue) {\n  return ((endValue - startValue) / startValue) * 100;\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport PortfolioComponent from \"../components/Portfolio\";\nimport DayPickers from \"../components/DayPickers\";\nimport ProfitResults from \"../components/ProfitResults\";\n\nconst MainContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst MainButton = styled.button`\n  border-radius: 2000px;\n  padding: 0 24px;\n  margin: 10px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border: 1px solid #e1e1e1;\n  height: 40px;\n  background-color: #fff;\n  color: #005ad6;\n  font-family: \"Poppins\";\n  font-weight: 500;\n  cursor: pointer;\n  ${(props) =>\n    props.disabled &&\n    css`\n      background-color: #f5f5f5;\n      color: #dadada;\n      cursor: default;\n    `};\n`;\n\nconst MainPage = () => {\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [disableButton, setDisableButton] = useState(true);\n  const [showResult, setShowResult] = useState(false);\n  const [yearsBetweenDates, setYearsBetweenDates] = useState(0);\n\n  const Portfolio = {\n    stocks: [\n      { name: \"TSLA\", qty: 12 },\n      { name: \"GOOG\", qty: 24 },\n      { name: \"AAPL\", qty: 16 },\n      { name: \"NVDA\", qty: 13.2 },\n    ],\n  };\n  const handleOnClick = () => {\n    setShowResult(true);\n  };\n\n  const checkForFields = () => {\n    const datesSelected = startDate.trim().length && endDate.trim().length;\n    if (datesSelected) {\n      setDisableButton(false);\n    } else {\n      setDisableButton(true);\n    }\n  };\n\n  useEffect(() => checkForFields());\n\n  return (\n    <MainContainer>\n      <PortfolioComponent stocks={Portfolio.stocks} />\n      <DayPickers\n        setStartDate={setStartDate}\n        setEndDate={setEndDate}\n        setYearsBetweenDates={setYearsBetweenDates}\n      />\n      <MainButton onClick={handleOnClick} disabled={disableButton}>\n        show me the moneyyy\n      </MainButton>\n      {showResult && (\n        <ProfitResults\n          stocks={Portfolio.stocks}\n          startDate={startDate}\n          endDate={endDate}\n          yearsBetweenDates={yearsBetweenDates}\n        />\n      )}\n    </MainContainer>\n  );\n};\n\nexport default MainPage;\n","import \"./App.css\";\nimport MainPage from \"./containers/MainPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        profit calculator\n        <span role=\"img\" aria-label=\"rocket\">\n          🚀\n        </span>\n      </header>\n      <body className=\"App-body\">\n        <MainPage />\n      </body>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}